from rply import 分词器母机, 语法分析器母机

分词母机 = 分词器母机()
分词母机.添了('左右', '⿰')
分词母机.添了('上下', '⿱')
分词母机.添了('全包围', '⿴')
分词母机.添了('左右上包围', '⿵')
分词母机.添了('左上包围', '⿸')
分词母机.添了('左下包围', '⿺')
分词母机.添了('右上包围', '⿹')
分词母机.添了('上中下', '⿳')
分词母机.添了('编码', '&.+;')
分词母机.添了('部分', '.') # r'[\u4e00-\u9fa5刃䒑𠆢𰀁⺄𰀢𫩏]') # 添加 U+2F81E

分析器母机 = 语法分析器母机(['左右', '上下', '全包围', '左右上包围', '左上包围', '右上包围', '上中下', '部分', '编码'])

@分析器母机.语法规则("结构数据 : 部分")
@分析器母机.语法规则("结构数据 : 字型 各部分")
@分析器母机.语法规则("结构数据 : 字型 字型 各部分")
def 结构数据(片段):
    if len(片段) == 1:
        return {'字型': '独体', '部分': 片段[0].getstr()}
    elif len(片段) == 2:
        return {'字型': 片段[0], '部分': 片段[1]}
    elif len(片段) == 3:
        return {'字型': 片段[0] + 片段[1], '部分': 片段[2]}

# 待做：超过三个部分
@分析器母机.语法规则("各部分 : 两种部分 两种部分")
@分析器母机.语法规则("各部分 : 两种部分 两种部分 两种部分")
def 各部分(片段):
    if len(片段) == 2:
        return [片段[0], 片段[1]]
    return [片段[0], 片段[1], 片段[2]]
            
@分析器母机.语法规则("两种部分 : 部分 | 编码")
def 两种部分(片段):
    return 片段[0].getstr()
            
@分析器母机.语法规则("字型 : 左右 | 上下 | 全包围 | 左右上包围 | 左上包围 | 右上包围 | 上中下")
def 字型(片段):
    return 片段[0].getstr()

分词器 = 分词母机.产出()
分析器 = 分析器母机.产出()

def 结构数据解析(源数据):
    return 分析器.按语法分词(分词器.分词(源数据))


# 下面第一字符超出unicode编码范围 \u4e00-\u9fa5
#print(结构数据解析('⿱刃一'))
#print(结构数据解析('⿱䒑业'))
#print(结构数据解析('⿱𠆢丨'))
#print(结构数据解析('⿹⺄𰀁'))

#print(结构数据解析('⿹&CDP-8964;山'))
#print(结构数据解析('⿵冂&CDP-8CC7;'))
#print(结构数据解析('⿳廿&CDP-8D76;女'))
# print(结构数据解析('⿱⿰&CDP-895C;&CDP-895C;一'))

# 待实现
#print(结构数据解析('⿱&CDP-8A65;&CDP-8CC6;'))
#print(结构数据解析('⿱一⿰⿵冂丶⿵冂丶'))
# 嵌套！⿱⿳亠口冖几  ⿱（⿳亠口冖）几


